apply plugin: 'com.android.library'
apply plugin: 'android-apt'

ext.vMajor = 0
ext.vMinor = 0

if (project.hasProperty("shredder.signing")
        && new File(project.property("shredder.signing") + ".gradle").exists()) {
    apply from: project.property("shredder.signing") + ".gradle";
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    signingConfigs {
        debug {
            storeFile file("shredder-debug.keystore")
            keyAlias 'followmedebug'
            keyPassword 'password'
            storePassword 'password'
        }
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode getBuildNumber()
        versionName computeVersionName()
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided "org.projectlombok:lombok:1.16.4"
    apt "org.projectlombok:lombok:1.16.4"
}

def getBuildNumber() {
    def versionCodeFile = file('buildNumber')
    def versionCode = 9999

    if (versionCodeFile.exists()) {
        versionCode = versionCodeFile.getText().trim()
    } else {
        println "Could not read buildNumber file. Version is set to default 9999. If you are seeing this on the build server, make sure you are executing 'git rev-list --no-merges HEAD | wc -l>app/buildNumber' before running the gradle build."
    }

    return Integer.valueOf(versionCode)
}

def writeVersionTagFile(versionNameString) {
    println sprintf("Writing versionName to versionTag file: versionName=%s", versionNameString)
    def versionNameFile = file('versionTag')
    if (!versionNameFile.exists()) {
        versionNameFile.createNewFile()
    }
    versionNameFile.setText(versionNameString)
}

def computeVersionName() {
    def fullVersionString = String.format('%d.%d.%d', vMajor, vMinor, getBuildNumber())
    writeVersionTagFile(fullVersionString)
    println "Full versionName is " + fullVersionString
    return fullVersionString
}

// https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en
apply from: 'maven/config.gradle'
apply from: 'maven/install.gradle'
apply from: 'maven/bintray.gradle'